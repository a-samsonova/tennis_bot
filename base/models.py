from django.db import models
from django.contrib.auth.models import AbstractUser
from django.core.exceptions import ValidationError
from django import forms
from django.utils import timezone
from datetime import timedelta, datetime
from base.utils import construct_main_menu, send_message
from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver

from base.utils import send_alert_about_changing_tr_day_status
from tennis_bot.config import TELEGRAM_TOKEN

import telegram


class ModelwithTimeManager(models.Manager):
    def tr_day_is_my_available(self, *args, **kwargs):
        return self.filter(is_available=True, tr_day_status=GroupTrainingDay.MY_TRAIN_STATUS, *args, **kwargs)


class ModelwithTime(models.Model):
    dttm_added = models.DateTimeField(default=timezone.now)
    dttm_deleted = models.DateTimeField(null=True, blank=True)

    objects = ModelwithTimeManager()

    class Meta:
        abstract = True


class User(AbstractUser):
    STATUS_WAITING = 'W'
    STATUS_TRAINING = 'G'
    STATUS_FINISHED = 'F'
    STATUS_ARBITRARY = 'A'
    STATUS_IND_TRAIN = 'I'
    STATUSES = (
        (STATUS_WAITING, '–≤ –æ–∂–∏–¥–∞–Ω–∏–∏'),
        (STATUS_TRAINING, '–≥—Ä—É–ø–ø–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'),
        (STATUS_ARBITRARY, '—Å–≤–æ–±–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫'),
        (STATUS_FINISHED, '–∑–∞–∫–æ–Ω—á–∏–ª'),
    )

    tarif_for_status = {
        STATUS_TRAINING: 400,
        STATUS_ARBITRARY: 600,
        STATUS_IND_TRAIN: 1400,
    }

    id = models.BigIntegerField(primary_key=True)  # telegram id
    telegram_username = models.CharField(max_length=64, null=True, blank=True)
    first_name = models.CharField(max_length=32, null=True, verbose_name='–ò–º—è')
    phone_number = models.CharField(max_length=16, null=True, verbose_name='–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')

    is_superuser = models.BooleanField(default=False)
    is_blocked = models.BooleanField(default=False)
    status = models.CharField(max_length=1, choices=STATUSES, default=STATUS_WAITING, verbose_name='—Å—Ç–∞—Ç—É—Å')

    time_before_cancel = models.DurationField(null=True, help_text='–ß–ê–°–´:–ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´',
                                              verbose_name='–í—Ä–µ–º—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç—å', default='6:0:0')
    bonus_lesson = models.SmallIntegerField(null=True, blank=True, default=0, verbose_name='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—ã–≥—Ä—ã—à–µ–π')

    add_info = models.CharField(max_length=128, null=True, blank=True, verbose_name='–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')

    class Meta:
        verbose_name = '–∏–≥—Ä–æ–∫'
        verbose_name_plural = '–∏–≥—Ä–æ–∫–∏'

    def __str__(self):
        return '{} {} -- {}'.format(self.first_name, self.last_name, self.phone_number)


class UserForm(forms.ModelForm):
    class Meta:
        model = User
        fields = ['id', 'first_name', 'last_name', 'phone_number', 'status', 'time_before_cancel', 'bonus_lesson',
                  'add_info']

    def clean(self):
        if 'status' in self.changed_data:
            new_status = self.cleaned_data.get('status')
            if self.instance.status == User.STATUS_WAITING and (new_status == User.STATUS_ARBITRARY or new_status == User.STATUS_TRAINING):
                bot = telegram.Bot(TELEGRAM_TOKEN)
                send_message([self.instance], '–¢–µ–ø–µ—Ä—å —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø–µ–Ω –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!', bot)


class TrainingGroup(ModelwithTime):
    name = models.CharField(max_length=32, verbose_name='–∏–º—è')
    users = models.ManyToManyField(User)
    max_players = models.SmallIntegerField(default=6, verbose_name='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ')

    class Meta:
        verbose_name = '–±–∞–Ω–¥–∞'
        verbose_name_plural = '–±–∞–Ω–¥—ã'

    def __str__(self):
        return '{}, max_players: {}'.format(self.name, self.max_players)


class TrainingGroupForm(forms.ModelForm):
    class Meta:
        model = TrainingGroup
        fields = ['name', 'users', 'max_players']

    def clean(self):
        users = self.cleaned_data.get('users')
        max_players = self.cleaned_data.get('max_players')
        if users.count() > max_players:
            raise ValidationError({'max_players': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ {}, –≤—ã —É–∫–∞–∑–∞–ª–∏ {}.'. \
                                  format(max_players, users.count())})


class GroupTrainingDay(ModelwithTime):
    MY_TRAIN_STATUS = 'M'
    RENT_TRAIN_STATUS = 'R'

    TR_DAY_STATUSES = (
        (MY_TRAIN_STATUS, '–º–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞'),
        (RENT_TRAIN_STATUS, '–∞—Ä–µ–Ω–¥–∞')
    )

    group = models.ForeignKey(TrainingGroup, on_delete=models.PROTECT, verbose_name='–ì—Ä—É–ø–ø–∞')
    absent = models.ManyToManyField(User, blank=True, help_text='–ö—Ç–æ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', verbose_name='–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ')
    date = models.DateField(default=timezone.now, verbose_name='–î–∞—Ç–∞ –ó–∞–Ω—è—Ç–∏—è')
    is_available = models.BooleanField(default=True, help_text='–ë—É–¥–µ—Ç –ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã')
    start_time = models.TimeField(null=True, help_text='–ß–ê–°–´:–ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´', verbose_name='–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è')
    duration = models.DurationField(null=True, default='1:0:0', help_text='–ß–ê–°–´:–ú–ò–ù–£–¢–´:–°–ï–ö–£–ù–î–´',
                                    verbose_name='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è')
    visitors = models.ManyToManyField(User, blank=True, help_text='–ü—Ä–∏—à–ª–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø\n', related_name='visitors',
                                      verbose_name='–ò–≥—Ä–æ–∫–∏ –∏–∑ –¥—Ä—É–≥–∏—Ö –≥—Ä—É–ø–ø')
    tr_day_status = models.CharField(max_length=1, default=MY_TRAIN_STATUS, help_text='–ú–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞',
                                     choices=TR_DAY_STATUSES, verbose_name='–°—Ç–∞—Ç—É—Å')

    class Meta:
        ordering = ['-date']
        verbose_name = '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å'
        verbose_name_plural = '—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–Ω–∏'

    def __str__(self):
        return '–ì—Ä—É–ø–ø–∞: {}, –¥–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {}, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {}'.format(self.group, self.date, self.start_time)


class GroupTrainingDayForm(forms.ModelForm):
    class Meta:
        model = GroupTrainingDay
        fields = ['group', 'absent', 'visitors', 'date', 'is_available', 'tr_day_status', 'start_time', 'duration']

    def clean(self):
        group = self.cleaned_data.get('group')
        current_amount_of_players = self.cleaned_data.get(
            'visitors').count() + group.users.count() - self.cleaned_data.get('absent').count()
        if current_amount_of_players > group.max_players:
            raise ValidationError(
                '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∏–≥—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ ‚Äî —Å–µ–π—á–∞—Å {}, –º–∞–∫—Å–∏–º—É–º {}'.format(current_amount_of_players,
                                                                                  group.max_players))

        if ('start_time' or 'duration') in self.changed_data:
            """
                –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤—ã–π grouptrainingday, —Ç–æ –Ω—É–∂–Ω–æ
                –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
                –Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—â–∏–µ.
            """
            today_trainings = GroupTrainingDay.objects.filter(date=self.cleaned_data.get('date'))
            start_time = datetime.combine(self.cleaned_data.get('date'), self.cleaned_data.get('start_time'))

            for train in today_trainings:
                exist_train_start_time = datetime.combine(train.date, train.start_time)
                if exist_train_start_time <= start_time < exist_train_start_time + train.duration:
                    raise ValidationError('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å, —Ç.–∫. —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ {}'\
                                          ' —Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {}.'.format(train.start_time, train.duration))

        bot = telegram.Bot(TELEGRAM_TOKEN)
        if 'is_available' in self.changed_data: #–µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Ç –¥–Ω—è –º–µ–Ω—è–µ—Ç—Å—è, —Ç–æ –æ—Ç—Å—ã–ª–∞–µ–º –∞–ª–µ—Ä—Ç –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            send_alert_about_changing_tr_day_status(self.instance, self.cleaned_data.get('is_available'), bot)

        if 'visitors' in self.changed_data:
            if self.cleaned_data.get('visitors').count() < self.instance.visitors.count():
                canceled_users = self.instance.visitors.all().exclude(id__in=self.cleaned_data.get('visitors').values('id'))
                text = f'üò±ATTENTIONüò±\n' \
                       f'–£ —Ç–µ–±—è –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –Ω–∞ <b> {self.cleaned_data.get("date")}.</b>\n' \
                       f'<b>–¢—Ä–µ–Ω–µ—Ä –µ–µ –æ—Ç–º–µ–Ω–∏–ª.</b> –ù–æ –Ω–µ –æ—Ç—á–∞–∏–≤–∞–π—Å—è, —è –¥–æ–±–∞–≤–ª—é —Ç–µ–±–µ –æ—Ç—ã–≥—Ä—ã—à üéæ'
                send_message(canceled_users, text, bot)
                for player in canceled_users:
                    player.bonus_lesson += 1
                    player.save()


class Channel(models.Model):
    name = models.CharField(max_length=64, default='')
    username = models.CharField(max_length=64, default='')
    code = models.CharField(max_length=32, default='')
    token = models.CharField(max_length=256, default='')


class Payment(models.Model):
    JANUARY, FEBRUARY, MARCH, APRIL, MAY, JUNE, JULY, AUGUST, SEPTEMBER = '1', '2', '3', '4', '5', '6', '7', '8', '9'
    OCTOBER, NOVEMBER, DECEMBER = '10', '11', '12'

    MONTHS = (
        (JANUARY, '—è–Ω–≤–∞—Ä—å'), (FEBRUARY, '—Ñ–µ–≤—Ä–∞–ª—å'), (MARCH, '–º–∞—Ä—Ç'), (APRIL, '–∞–ø—Ä–µ–ª—å'), (MAY, '–º–∞–π'),
        (JUNE, '–∏—é–Ω—å'), (JULY, '–∏—é–ª—å'), (AUGUST, '–∞–≤–≥—É—Å—Ç'), (SEPTEMBER, '—Å–µ–Ω—Ç—è–±—Ä—å'), (OCTOBER, '–æ–∫—Ç—è–±—Ä—å'),
        (NOVEMBER, '–Ω–æ—è–±—Ä—å'), (DECEMBER, '–¥–µ–∫–∞–±—Ä—å')
    )

    YEAR_2020 = '0'
    YEAR_2021 = '1'

    YEARS = (
        (YEAR_2020, '2020'), (YEAR_2021, '2021')
    )

    player = models.ForeignKey(User, on_delete=models.SET_NULL, verbose_name='–∏–≥—Ä–æ–∫', null=True)
    month = models.CharField(max_length=2, choices=MONTHS, verbose_name='–º–µ—Å—è—Ü')
    year = models.CharField(max_length=1, choices=YEARS, verbose_name='–≥–æ–¥')
    amount = models.PositiveIntegerField(verbose_name='–°–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç–∏–ª')

    class Meta:
        ordering = ['year']
        verbose_name = '–æ–ø–ª–∞—Ç–∞'
        verbose_name_plural = '–æ–ø–ª–∞—Ç–∞'

    def __str__(self):
        return f"{self.player}, –º–µ—Å—è—Ü: {self.month}, —Ä—É–±–ª–µ–π: {self.amount}"


"""—Ä–∞–∑–¥–µ–ª —Å —Å–∏–≥–Ω–∞–ª–∞–º–∏, –≤ –æ—Ç–µ–¥–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ—à–ª–æ"""


@receiver(post_save, sender=GroupTrainingDay)
def create_training_days_for_next_two_months(sender, instance, created, **kwargs):
    """
    –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ instance GroupTrainingDay –∞–≤—Ç–æ–º–∞—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º
    –µ—â–µ —Ç–∞–∫–∏—Ö –∂–µ –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏–º–µ—Ä–Ω–æ –Ω–∞ 2 –º–µ—Å—è—Ü–∞ –≤–ø–µ—Ä–µ–¥.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º bulk_create, —Ç.–∫. –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∏–º —Ä–µ–∫—É—Ä—Å–∏—é.
    """
    if created and instance.group.max_players > 1:
        date = instance.date + timedelta(days=7)
        dates = [date]
        for _ in range(24):
            date += timedelta(days=7)
            dates.append(date)
        objs = [GroupTrainingDay(group=instance.group, date=dat, start_time=instance.start_time,
                                 duration=instance.duration) for dat in dates]
        GroupTrainingDay.objects.bulk_create(objs)


@receiver(post_delete, sender=GroupTrainingDay)
def delete_training_days(sender, instance, **kwargs):
    """
        –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ instance GroupTrainingDay –∞–≤—Ç–æ–º–∞—Ç–æ–º —É–¥–∞–ª—è–µ–º
        –∑–∞–Ω—è—Ç–∏–µ –≤ —ç—Ç–æ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–∏—Ö –¥–∞—Ç.
    """
    GroupTrainingDay.objects.filter(group=instance.group, start_time=instance.start_time, duration=instance.duration,
                                    date__gt=instance.date).delete()


@receiver(post_save, sender=User)
def create_group_for_arbitrary(sender, instance, created, **kwargs):
    """
        –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ–¥–∏—Ç –ø–æ —Å–≤–æ–±–æ–¥–Ω–æ–º—É –≥—Ä–∞—Ñ–∏–∫—É, —Ç–æ —Å–æ–∑–¥–∞–¥–∏–º
        –¥–ª—è –Ω–µ–≥–æ –≥—Ä—É–ø–ø—É, —Å–æ—Å—Ç–æ—è—é—â—É—é —Ç–æ–ª—å–∫–æ –∏–∑ –Ω–µ–≥–æ.
    """
    if instance.status == User.STATUS_ARBITRARY:
        group, _ = TrainingGroup.objects.update_or_create(name=instance.first_name + instance.last_name, max_players=1)
        if not group.users.count():
            group.users.add(instance)



